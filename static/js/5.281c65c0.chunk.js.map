{"version":3,"sources":["utils/mapbox-utils.ts","features/maps/Heatmap.tsx","features/maps/ActivityMaps.tsx"],"names":["initializeMap","container","accessToken","process","mapboxgl","Map","style","Heatmap","mapContainerRef","useRef","mapRef","useState","positions","setPositions","useEffect","a","activityPositions","page","lastCount","strava","result","length","runs","filter","map","summary_polyline","Array","prototype","push","apply","flatMap","toGeoJSON","coordinates","current","on","target","setCenter","setZoom","addSource","type","data","properties","geometry","addLayer","id","source","paint","property","ref","minHeight","minWidth","ActivityMaps","defaultChecked"],"mappings":"qHAAA,uDAEaA,EAAgB,SAACC,GAE5B,IAAMC,EAAcC,+FAMpB,OAAO,IAAIC,IAASC,IAAI,CACtBH,cACAD,YACAK,MAAO,yC,uHCLEC,EAAU,WACrB,IAAMC,EAAkBC,iBAAuB,MACzCC,EAASD,mBAFY,EAGOE,qBAHP,mBAGpBC,EAHoB,KAGTC,EAHS,KA8E3B,OAzEAC,qBAAU,WACP,sBAAC,oCAAAC,EAAA,sDACMC,EAAwC,GAGrCC,EAAO,EAAGC,GAAa,EAJhC,UAIiD,IAAdA,EAJnC,iCAKuBC,IAA0BF,GALjD,OAKQG,EALR,OAMEF,EAAYE,EAAOC,OAEbC,EAAOF,EAAOG,QAAO,gBAAGC,EAAH,EAAGA,IAAH,cAAaA,QAAb,IAAaA,OAAb,EAAaA,EAAKC,oBAE7CC,MAAMC,UAAUC,KAAKC,MACnBb,EACAM,EAAKQ,SAAQ,gBAAGN,EAAH,EAAGA,IAAH,OAAaO,oBAAUP,EAAIC,kBAAkBO,gBAZ9D,OAIoDf,IAJpD,uBAgBAJ,EAAaG,GAhBb,2CAAD,KAkBA,IAEHF,qBAAU,WACHF,IAIAF,EAAOuB,UACVvB,EAAOuB,QAAUjC,YAAcQ,EAAgByB,UAGjDvB,EAAOuB,QAAQC,GAAG,QAAQ,YAAsB,IAAXV,EAAU,EAAlBW,OAC3BX,EAAIY,UAAU,EAAE,MAAO,QAAQC,QAAQ,IAEvCb,EAAIc,UAAU,aAAc,CAC1BC,KAAM,UAGNC,KAAM,CACJD,KAAM,UACNE,WAAY,GACZC,SAAU,CACRH,KAAM,aACNP,YAAapB,MAgBnBY,EAAImB,SAAS,CACXC,GAAI,UACJL,KAAM,UACNM,OAAQ,aACRC,MAAO,CACL,iBAAkB,EAClB,iBAAkB,CAChBP,KAAM,WACNQ,SAAU,wBAKjB,CAACnC,IAGF,qBACEoC,IAAKxC,EACLF,MAAO,CAAE2C,UAAW,QAASC,SAAU,YCvE9BC,UAhBM,WACnB,OACE,gCACE,+CACA,8BACE,kCACE,uBAAOZ,KAAK,QAAQa,gBAAc,IADpC,eAKF,cAAC,EAAD","file":"static/js/5.281c65c0.chunk.js","sourcesContent":["import mapboxgl from 'mapbox-gl'\n\nexport const initializeMap = (container: HTMLElement) => {\n  // TODO: Allow overriding this token from in-app settings, similar to Strava API.\n  const accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN\n\n  if (!accessToken) {\n    throw new Error('No mapbox access token available.')\n  }\n\n  return new mapboxgl.Map({\n    accessToken,\n    container,\n    style: 'mapbox://styles/mapbox/streets-v11',\n    //center: [-73.55, 45.54],\n    //zoom: 12,\n  })\n}\n","import mapboxgl from 'mapbox-gl'\nimport { useEffect, useRef, useState } from 'react'\nimport * as strava from '../strava-integration/strava-api'\n\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport { toGeoJSON } from '@mapbox/polyline'\nimport { initializeMap } from '../../utils/mapbox-utils'\n\nexport const Heatmap = () => {\n  const mapContainerRef = useRef<HTMLDivElement>(null)\n  const mapRef = useRef<mapboxgl.Map>()\n  const [positions, setPositions] = useState<GeoJSON.Position[]>()\n\n  useEffect(() => {\n    ;(async () => {\n      const activityPositions: GeoJSON.Position[] = []\n\n      // get activities page by page to find all activities\n      for (let page = 1, lastCount = -1; lastCount !== 0; page++) {\n        const result = await strava.getPagedActivities(page)\n        lastCount = result.length\n\n        const runs = result.filter(({ map }) => map?.summary_polyline)\n\n        Array.prototype.push.apply(\n          activityPositions,\n          runs.flatMap(({ map }) => toGeoJSON(map.summary_polyline).coordinates)\n        )\n      }\n\n      setPositions(activityPositions)\n    })()\n  }, [])\n\n  useEffect(() => {\n    if (!positions) {\n      return\n    }\n\n    if (!mapRef.current) {\n      mapRef.current = initializeMap(mapContainerRef.current!)\n    }\n\n    mapRef.current.on('load', ({ target: map }) => {\n      map.setCenter([-73.55, 45.54]).setZoom(12)\n\n      map.addSource('heatpoints', {\n        type: 'geojson',\n        // The following is lighter on memory, but if we wanted to attach properties\n        // we'd probably have to use FeatureCollection.\n        data: {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'MultiPoint',\n            coordinates: positions,\n          },\n        },\n        /*data: {\n          type: 'FeatureCollection',\n          features: positions.map((pos) => ({\n            type: 'Feature',\n            properties: { },\n            geometry: {\n              type: 'Point',\n              coordinates: pos,\n            },\n          })),\n        },*/\n      })\n\n      map.addLayer({\n        id: 'my-heat',\n        type: 'heatmap',\n        source: 'heatpoints',\n        paint: {\n          'heatmap-radius': 6,\n          'heatmap-weight': {\n            type: 'identity',\n            property: 'point_count',\n          },\n        },\n      })\n    })\n  }, [positions])\n\n  return (\n    <div\n      ref={mapContainerRef}\n      style={{ minHeight: '600px', minWidth: '600px' }}\n    />\n  )\n}\n","import { Heatmap } from './Heatmap'\n\nconst ActivityMaps = () => {\n  return (\n    <div>\n      <h2>Activity maps</h2>\n      <div>\n        <label>\n          <input type=\"radio\" defaultChecked />\n          Heatmap\n        </label>\n      </div>\n      <Heatmap />\n    </div>\n  )\n}\n\n// default export for React.lazy()\nexport default ActivityMaps\n"],"sourceRoot":""}