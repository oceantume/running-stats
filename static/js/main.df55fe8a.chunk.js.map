{"version":3,"sources":["features/strava-integration/strava-auth-api.ts","features/strava-integration/strava-api.ts","features/strava-integration/StravaAuthReturn.tsx","utils/useUniqueId.ts","components/InputField.tsx","features/strava-integration/StravaApiSettings.tsx","features/header/Header.tsx","components/Pagination.tsx","features/activities/ActivitiesList.tsx","features/footer/Footer.tsx","features/App.tsx","reportWebVitals.ts","index.tsx","features/strava-integration/strava-store.ts"],"names":["getStravaAuthenticationUrl","clientId","redirectUrl","userState","url","URL","params","searchParams","append","toString","authenticateWithCode","clientSecret","code","a","formParams","URLSearchParams","fetch","method","body","response","ok","text","error","Error","json","data","result","expiresAt","Date","expires_at","refreshToken","refresh_token","accessToken","access_token","info","firstName","athlete","firstname","lastName","lastname","authenticateWithRefreshToken","getPagedActivities","page","getLatestAuth","auth","headers","Authorization","session","res","activities","handleApiError","getActivityById","activityId","status","getStoredStravaAuth","client","refreshAccessToken","id","secret","newAuth","setStoredStravaAuth","StravaAuthReturn","location","useStravaAuth","search","useState","done","setDone","setError","useEffect","get","avatarUrl","name","to","lastUniqueId","createUniqueId","InputField","children","props","uniqueId","useUniqueId","type","htmlFor","StravaApiConnection","routeMatch","useRouteMatch","console","log","style","display","flexDirection","maxWidth","onSubmit","e","preventDefault","formData","FormData","target","trim","window","href","authUrl","required","defaultValue","host","readOnly","value","toISOString","onClick","undefined","path","component","Header","className","Pagination","onOpenPage","canOpenNextPage","canOpenPreviousPage","disabled","margin","ActivitiesList","setActivities","setPage","strava","length","map","activity","Math","round","distance","Footer","alt","src","process","height","Maps","lazy","ActivityOverview","App","fallback","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","set","stravaAuthChangeListeners","forEach","callback","setAuth","cancelled","updateAuth","unregister","listener","push","index","findIndex","item","splice","listenToStravaAuthChange"],"mappings":"sPAAaA,EAA6B,SACxCC,EACAC,EACAC,GAEA,IAAMC,EAAM,IAAIC,IAAI,0CACdC,EAASF,EAAIG,aAWnB,OATAD,EAAOE,OAAO,YAAaP,GAC3BK,EAAOE,OAAO,eAAgBN,GAC9BI,EAAOE,OAAO,gBAAiB,QAC/BF,EAAOE,OAAO,QAAS,iBAEnBL,GACFG,EAAOE,OAAO,QAASL,GAGlBC,EAAIK,YAGAC,EAAoB,uCAAG,WAClCT,EACAU,EACAC,GAHkC,uBAAAC,EAAA,6DAK5BC,EAAa,IAAIC,iBACZP,OAAO,YAAaP,GAC/Ba,EAAWN,OAAO,gBAAiBG,GACnCG,EAAWN,OAAO,OAAQI,GAC1BE,EAAWN,OAAO,aAAc,sBATE,SAWXQ,MAAM,qCAAsC,CACjEC,OAAQ,OACRC,KAAMJ,IAb0B,WAW5BK,EAX4B,QAgBpBC,GAhBoB,kCAiBZD,EAASE,OAjBG,cAiB1BC,EAjB0B,OAkB1B,IAAIC,MACR,2DAA6DD,GAnB/B,yBAuBfH,EAASK,OAvBM,eAuB5BC,EAvB4B,OA4B5BC,EAAS,CACbC,UAAW,IAAIC,KAAuB,IAAlBH,EAAKI,YACzBC,aAAcL,EAAKM,cACnBC,YAAaP,EAAKQ,aAClBC,KAAM,CACJC,UAAWV,EAAKW,QAAQC,UACxBC,SAAUb,EAAKW,QAAQG,WAlCO,kBAsC3Bb,GAtC2B,4CAAH,0DAyCpBc,EAA4B,uCAAG,WAC1CvC,EACAU,EACAmB,GAH0C,uBAAAjB,EAAA,6DAKpCK,EAAO,IAAIH,iBACZP,OAAO,YAAaP,GACzBiB,EAAKV,OAAO,gBAAiBG,GAC7BO,EAAKV,OAAO,gBAAiBsB,GAC7BZ,EAAKV,OAAO,aAAc,iBATgB,SAWnBQ,MAAM,qCAAsC,CACjEC,OAAQ,OACRC,SAbwC,WAWpCC,EAXoC,QAgB5BC,GAhB4B,kCAiBpBD,EAASE,OAjBW,cAiBlCC,EAjBkC,OAkBlC,IAAIC,MACR,sDAAwDD,GAnBlB,yBAuBvBH,EAASK,OAvBc,eAuBpCC,EAvBoC,OA2BpCC,EAAS,CACbC,UAAW,IAAIC,KAAuB,IAAlBH,EAAKI,YACzBC,aAAcL,EAAKM,cACnBC,YAAaP,EAAKQ,cA9BsB,kBAiCnCP,GAjCmC,4CAAH,2D,sJCnD5Be,EAAkB,uCAAG,WAChCC,GADgC,qBAAA7B,EAAA,sEAGb8B,IAHa,cAG1BC,EAH0B,QAI1BxC,EAAM,IAAIC,IAAI,qDAChBE,aAAaC,OAAO,OAAQkC,EAAKjC,YALL,SAMdO,MAAMZ,EAAIK,WAAY,CACtCoC,QAAS,CAAEC,cAAc,UAAD,OAAYF,EAAKG,QAAQf,gBAPnB,YAM1BgB,EAN0B,QAUxB5B,GAVwB,kCAWL4B,EAAIxB,OAXC,eAWxByB,EAXwB,yBAYvBA,GAZuB,iCAezBC,EAAeF,IAfU,4CAAH,sDAkBlBG,EAAe,uCAAG,WAC7BC,GAD6B,qBAAAvC,EAAA,sEAGV8B,IAHU,cAGvBC,EAHuB,OAIvBxC,EAJuB,mDAI2BgD,GAJ3B,SAKXpC,MAAMZ,EAAK,CAC3ByC,QAAS,CAAEC,cAAc,UAAD,OAAYF,EAAKG,QAAQf,gBANtB,YAKvBgB,EALuB,QASrB5B,GATqB,kCAUF4B,EAAIxB,OAVF,eAUrByB,EAVqB,yBAWpBA,GAXoB,iCActBC,EAAeF,IAdO,4CAAH,sDAiBtBE,EAAiB,SAACF,GACtB,MAAM,IAAIzB,MAAM,6BAA+ByB,EAAIK,SAG/CV,EAAa,uCAAG,4BAAA9B,EAAA,sEACDyC,cADC,WAEhB,QADEV,EADc,cAEhB,IAACA,OAAD,EAACA,EAAMW,UAAU,OAACX,QAAD,IAACA,OAAD,EAACA,EAAMG,SAFR,sBAGZ,IAAIxB,MAAM,mCAHE,YAMhBqB,EAAKG,QAAQpB,UAAY,IAAIC,MANb,gCAOL4B,IAPK,wEAUbZ,GAVa,4CAAH,qDAabY,EAAkB,uCAAG,wCAAA3C,EAAA,sEACNyC,cADM,WAErB,QADEV,EADmB,cAErB,IAACA,OAAD,EAACA,EAAMW,UAAU,OAACX,QAAD,IAACA,OAAD,EAACA,EAAMG,SAFH,sBAGjB,IAAIxB,MAAM,mCAHO,gBAMFqB,EAAKW,OAApBE,EANiB,EAMjBA,GAAIC,EANa,EAMbA,OACJ5B,EAAiBc,EAAKG,QAAtBjB,aAPiB,SASJU,YAA6BiB,EAAIC,EAAQ5B,GATrC,cASnBJ,EATmB,OAUnBiC,EAA4B,CAChCJ,OAAQX,EAAKW,OACbR,QAAQ,2BACHH,EAAKG,SACLrB,IAdkB,UAkBnBkC,YAAoBD,GAlBD,iCAmBlBA,GAnBkB,4CAAH,sD,2NCxDXE,EAAmB,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,SAC3BlB,EAAOmB,cADwD,GAE1C,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAMW,SAAU,GAA/BE,EAF6D,EAE7DA,GAAIC,EAFyD,EAEzDA,OAEJM,EAAWF,EAAXE,OAJ6D,EAM7CC,oBAAS,GANoC,mBAM9DC,EAN8D,KAMxDC,EANwD,OAO3CF,mBAAS,IAPkC,mBAO9D3C,EAP8D,KAOvD8C,EAPuD,KA4CrE,OAnCAC,qBAAU,WACP,sBAAC,kCAAAxD,EAAA,yDACMP,EAAS,IAAIS,gBAAgBiD,GAC7B1C,EAAQhB,EAAOgE,IAAI,SACnB1D,EAAON,EAAOgE,IAAI,SAIpBhD,EAPJ,uBAQE8C,EAAS9C,GARX,+BAYImC,GAAMC,GAAU9C,GAZpB,iCAauBF,YAAqB+C,EAAIC,EAAQ9C,GAbxD,cAaQc,EAbR,iBAeQkC,YAAoB,CACxBL,OAAQ,CAAEE,KAAIC,UACdX,QAAS,CACPjB,aAAcJ,EAAOI,aACrBE,YAAaN,EAAOM,YACpBL,UAAWD,EAAOC,UAClBS,QAAS,CACPqB,GAAI,GACJc,UAAW,GACXC,KAAK,GAAD,OAAK9C,EAAOQ,KAAKC,UAAjB,YAA8BT,EAAOQ,KAAKI,cAxBtD,QA6BE6B,GAAQ,GA7BV,2CAAD,KAgCA,CAACV,EAAIC,EAAQM,IAEZ1C,EAEA,0EAC2C,+BAAOA,OAK/C4C,EAAO,cAAC,IAAD,CAAUO,GAAG,cAAiB,M,gBCnD1CC,EAAe,EACbC,EAAiB,gCAAcD,ICKxBE,G,MAAa,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAaC,EAA6B,4BAC/DC,EDZmB,WAAO,IAAD,EAClBd,mBAASU,GACtB,OAF+B,oBCYdK,GADoD,EAG1Bf,oBAAS,GAC9CgB,EAJ+D,oBAIzC,OAASH,EAAMG,KAE3C,OACE,qCACE,uBAAOC,QAASJ,EAAMrB,IAAMsB,EAA5B,SAAuCF,IACvC,iDAAWC,GAAX,IAAkBG,KAAMA,EAAMxB,GAAIqB,EAAMrB,IAAMsB,UChBvCI,EAAsB,WAAO,IAAD,IACjCvC,EAAOmB,cACPqB,EAAaC,cAInB,OAFAC,QAAQC,IAAI,QAAS3C,GAGnB,uBACE4C,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,SAAU,SAC7DC,SAAU,SAACC,GACTA,EAAEC,iBAEF,IAAMC,EAAW,IAAIC,SAASH,EAAEI,QAC1BxC,EAAKsC,EAASzB,IAAI,YAAa7D,WAAWyF,OAC1CxC,EAASqC,EAASzB,IAAI,gBAAiB7D,WAAWyF,OAEvD,sBAAC,8BAAArF,EAAA,sEACM+C,YAAoB,CAAEL,OAAQ,CAAEE,KAAIC,YAD1C,OAGMxD,EAHN,UAGuBiG,OAAOrC,SAASsC,KAHvC,uBAIMC,EAAUrG,YAA2ByD,EAAIvD,GAE/CiG,OAAOrC,SAASsC,KAAOC,EANvB,0CAAD,IATL,UAmBE,0CACA,mDACA,cAAC,EAAD,CAAYC,UAAQ,EAAC9B,KAAK,WAAW+B,aAAY,OAAE3D,QAAF,IAAEA,GAAF,UAAEA,EAAMW,cAAR,aAAE,EAAcE,GAAjE,uBAGA,cAAC,EAAD,CACE6C,UAAQ,EACR9B,KAAK,eACLS,KAAK,WACLsB,aAAY,OAAE3D,QAAF,IAAEA,GAAF,UAAEA,EAAMW,cAAR,aAAE,EAAcG,OAJ9B,2BAQA,wBAAQuB,KAAK,SAAb,gCAEC,OAACrC,QAAD,IAACA,OAAD,EAACA,EAAMG,UACN,gCACE,qNAKA,6EAC+C,IAC7C,mBAAGqD,KAAK,sCAAR,uDAFF,wBAKuB,8DALvB,aAKsE,IACpE,+BAAOD,OAAOrC,SAAS0C,OANzB,sCAQA,uCACS,IACP,mBAAGJ,KAAK,mCAAR,2CAEK,IAJP,8YAcC,OAAJxD,QAAI,IAAJA,OAAA,EAAAA,EAAMG,UACL,qCACE,oDACA,cAAC,EAAD,CAAY0D,UAAQ,EAACC,MAAK,OAAE9D,QAAF,IAAEA,OAAF,EAAEA,EAAMG,QAAQX,QAAQoC,KAAlD,0BAGA,cAAC,EAAD,CACES,KAAK,WACLwB,UAAQ,EACRC,MAAK,OAAE9D,QAAF,IAAEA,OAAF,EAAEA,EAAMG,QAAQf,YAHvB,0BAOA,cAAC,EAAD,CAAYyE,UAAQ,EAACC,MAAK,OAAE9D,QAAF,IAAEA,OAAF,EAAEA,EAAMG,QAAQpB,UAAUgF,cAApD,wBAGA,cAAC,EAAD,CACE1B,KAAK,WACLwB,UAAQ,EACRC,MAAK,OAAE9D,QAAF,IAAEA,OAAF,EAAEA,EAAMG,QAAQjB,aAHvB,2BAOA,wBACEmD,KAAK,SACL2B,QAAS,WACPhD,iBAAoBiD,IAHxB,yDAWJ,cAAC,IAAD,CACEC,KAAI,UAAK1B,EAAW0B,KAAhB,uBACJC,UAAWlD,Q,QC5GNmD,G,MAAS,WACpB,IAAMpE,EAAOmB,cAEb,OACE,yBAAQkD,UAAU,aAAlB,UACE,gCACE,+CACA,+BACE,6BACE,cAAC,IAAD,CAASxC,GAAG,cAAZ,0BAEF,6BACE,cAAC,IAAD,CAASA,GAAG,QAAZ,oBAEF,6BACE,cAAC,IAAD,CAASA,GAAG,YAAZ,8BAKN,sBAAKwC,UAAU,gBAAf,YACG,OAACrE,QAAD,IAACA,OAAD,EAACA,EAAMG,UAAW,iBACd,OAAJH,QAAI,IAAJA,OAAA,EAAAA,EAAMG,UAAWH,EAAKG,QAAQX,QAAQoC,aCnBlC0C,EAAa,SAAC,GAAD,IACxBxE,EADwB,EACxBA,KACAyE,EAFwB,EAExBA,WACAC,EAHwB,EAGxBA,gBACAC,EAJwB,EAIxBA,oBAJwB,OAMxB,gCACE,wBACEC,UAAWD,EACXT,QAAS,kBAAMO,EAAWzE,EAAO,IAFnC,sBAMA,uBAAM8C,MAAO,CAAE+B,OAAQ,QAAvB,kBAAuC7E,KACvC,wBAAQ4E,UAAWF,EAAiBR,QAAS,kBAAMO,EAAWzE,EAAO,IAArE,sB,QChBS8E,EAAiB,WAAO,IAAD,EACEvD,qBADF,mBAC3BhB,EAD2B,KACfwE,EADe,OAEVxD,mBAAiB,GAFP,mBAE3BvB,EAF2B,KAErBgF,EAFqB,KAWlC,OAPArD,qBAAU,WACP,sBAAC,4BAAAxD,EAAA,sEACyB8G,IAA0BjF,GADnD,OACMO,EADN,OAEAwE,EAAcxE,GAFd,0CAAD,KAIA,CAACP,IAGF,gCACE,4CACA,cAAC,EAAD,CACEA,KAAMA,EACNyE,WAAYO,EACZL,oBAAqB3E,EAAO,EAC5B0E,kBAAmBnE,GAAcA,EAAW2E,OAAS,IAGvD,oCACG3E,QADH,IACGA,OADH,EACGA,EAAY4E,KAAI,SAACC,GAAD,OACf,+BACE,cAAC,IAAD,CAAMrD,GAAE,sBAAiBqD,EAASrE,IAAlC,SAAyCqE,EAAStD,OADpD,KAEGuD,KAAKC,MAAMF,EAASG,SAAW,KAFlC,SAASH,EAASrE,UAMpBR,GAAc,2CACfA,IAAeA,EAAW2E,QAAU,oDCjC9BM,G,MAAS,WACpB,OACE,wBAAQjB,UAAU,aAAlB,SACE,mBAAGb,KAAK,yBAAR,SACE,qBACE+B,IAAI,oBACJC,IAAG,UAAKC,GAAL,0BACH7C,MAAO,CAAE8C,OAAQ,gBCFrBC,EAAOC,gBAAK,kBAAM,sDAClBC,EAAmBD,gBAAK,kBAAM,sDAEvBE,EAAM,WACjB,OACE,eAAC,IAAD,WACE,sBAAKzB,UAAU,6BAAf,UACE,cAAC,EAAD,IACA,cAAC,WAAD,CAAU0B,SAAU,2CAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAAC9B,KAAK,IAAI+B,OAAQ,kBAAM,cAAC,IAAD,CAAUpE,GAAG,iBACjD,cAAC,IAAD,CAAOqC,KAAK,YAAYC,UAAW5B,IACnC,cAAC,IAAD,CAAO2B,KAAK,kBAAkBC,UAAW0B,IACzC,cAAC,IAAD,CAAO3B,KAAK,cAAcC,UAAWS,IACrC,cAAC,IAAD,CAAOV,KAAK,QAAQC,UAAWwB,YAIrC,cAAC,EAAD,QCXSO,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCFdQ,IAASV,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K,sLCbaxF,EAAmB,uCAAG,sBAAAzC,EAAA,sEAC3ByD,YAAsB,eADK,mFAAH,qDAInBV,EAAmB,uCAAG,WACjChB,GADiC,SAAA/B,EAAA,sEAG3B8I,YAAI,cAAe/G,GAHQ,OAIjCgH,EAA0BC,SAAQ,mBAAkBC,EAAlB,EAAGA,eAJJ,2CAAH,sDA4BnB/F,EAAgB,WAAO,IAAD,EACTE,qBADS,mBAC1BrB,EAD0B,KACpBmH,EADoB,KAwBjC,OArBA1F,qBAAU,WACR,IAAI2F,GAAY,EAEVC,EAAU,uCAAG,4BAAApJ,EAAA,sEACEyC,IADF,OACXV,EADW,OAEZoH,GACHD,EAAQnH,GAHO,2CAAH,qDAQhBqH,IAEA,IAAMC,EAjC8B,SAACJ,GACvC,IAAMK,EAAW,CAAEL,YAEnB,OADAF,EAA0BQ,KAAKD,GACxB,WACL,IAAME,EAAQT,EAA0BU,WACtC,SAACC,GAAD,OAAUA,IAASJ,KAEjBE,GAAS,GACXT,EAA0BY,OAAOH,EAAO,IAyBvBI,CAAyBR,GAE5C,OAAO,WACLC,IACAF,GAAY,KAEb,IAEIpH,GAIHgH,EAAwD,K","file":"static/js/main.df55fe8a.chunk.js","sourcesContent":["export const getStravaAuthenticationUrl = (\n  clientId: string,\n  redirectUrl: string,\n  userState?: string\n) => {\n  const url = new URL('https://www.strava.com/oauth/authorize')\n  const params = url.searchParams\n\n  params.append('client_id', clientId)\n  params.append('redirect_uri', redirectUrl)\n  params.append('response_type', 'code')\n  params.append('scope', 'activity:read')\n\n  if (userState) {\n    params.append('state', userState)\n  }\n\n  return url.toString()\n}\n\nexport const authenticateWithCode = async (\n  clientId: string,\n  clientSecret: string,\n  code: string\n) => {\n  const formParams = new URLSearchParams()\n  formParams.append('client_id', clientId)\n  formParams.append('client_secret', clientSecret)\n  formParams.append('code', code)\n  formParams.append('grant_type', 'authorization_code')\n\n  const response = await fetch('https://www.strava.com/oauth/token', {\n    method: 'POST',\n    body: formParams,\n  })\n\n  if (!response.ok) {\n    const error = await response.text()\n    throw new Error(\n      'Unknown error while getting initial Strava auth tokens. ' + error\n    )\n  }\n\n  const data = await response.json()\n\n  //log.info(\"Authentified to Strava with code:\", data);\n\n  // NOTE: we could also get profile picture here (data.athlete.profile or profile_medium)\n  const result = {\n    expiresAt: new Date(data.expires_at * 1000),\n    refreshToken: data.refresh_token,\n    accessToken: data.access_token,\n    info: {\n      firstName: data.athlete.firstname,\n      lastName: data.athlete.lastname,\n    },\n  }\n\n  return result\n}\n\nexport const authenticateWithRefreshToken = async (\n  clientId: string,\n  clientSecret: string,\n  refreshToken: string\n) => {\n  const body = new URLSearchParams()\n  body.append('client_id', clientId)\n  body.append('client_secret', clientSecret)\n  body.append('refresh_token', refreshToken)\n  body.append('grant_type', 'refresh_token')\n\n  const response = await fetch('https://www.strava.com/oauth/token', {\n    method: 'POST',\n    body,\n  })\n\n  if (!response.ok) {\n    const error = await response.text()\n    throw new Error(\n      'Unknown error while refreshing Strava auth tokens: ' + error\n    )\n  }\n\n  const data = await response.json()\n\n  //log.info(\"Authentified to Strava with refresh token:\", data);\n\n  const result = {\n    expiresAt: new Date(data.expires_at * 1000),\n    refreshToken: data.refresh_token,\n    accessToken: data.access_token,\n  }\n\n  return result\n}\n\nexport const revokeToken = async (accessToken: string) => {\n  const body = new URLSearchParams()\n  body.append('access_token', accessToken)\n\n  const response = await fetch('https://www.strava.com/oauth/deauthorize', {\n    method: 'POST',\n    body,\n  })\n\n  if (!response.ok) {\n    //log.error(\"Error received while revoking Strava token\", response);\n  }\n}\n","import { StravaApiActivity, StravaApiActivitySummary } from './strava-api-types'\nimport { authenticateWithRefreshToken } from './strava-auth-api'\nimport { getStoredStravaAuth, setStoredStravaAuth } from './strava-store'\n\n// NOTE: Context stuff is complicated and seems like it's gonna cause a cascading mess\n// when updating session info and whatnot. Let's make a class with a simpler interface\n// and interact with that instead.\n// We can just add event registration for receiving updates for client/session info on the\n// settings page.\n\nexport const getPagedActivities = async (\n  page: number\n): Promise<StravaApiActivitySummary[]> => {\n  const auth = await getLatestAuth()\n  const url = new URL('https://www.strava.com/api/v3/athlete/activities')\n  url.searchParams.append('page', page.toString())\n  const res = await fetch(url.toString(), {\n    headers: { Authorization: `Bearer ${auth.session.accessToken}` },\n  })\n\n  if (res.ok) {\n    const activities = await res.json()\n    return activities\n  }\n\n  return handleApiError(res)\n}\n\nexport const getActivityById = async (\n  activityId: number | string\n): Promise<StravaApiActivity> => {\n  const auth = await getLatestAuth()\n  const url = `https://www.strava.com/api/v3/activities/${activityId}`\n  const res = await fetch(url, {\n    headers: { Authorization: `Bearer ${auth.session.accessToken}` },\n  })\n\n  if (res.ok) {\n    const activities = await res.json()\n    return activities\n  }\n\n  return handleApiError(res)\n}\n\nconst handleApiError = (res: Response) => {\n  throw new Error('Strava API error. Status: ' + res.status)\n}\n\nconst getLatestAuth = async () => {\n  const auth = await getStoredStravaAuth()\n  if (!auth?.client || !auth?.session) {\n    throw new Error('No active Strava session found.')\n  }\n\n  if (auth.session.expiresAt < new Date()) {\n    return await refreshAccessToken()\n  }\n\n  return auth as ActiveStravaAuth\n}\n\nconst refreshAccessToken = async () => {\n  const auth = await getStoredStravaAuth()\n  if (!auth?.client || !auth?.session) {\n    throw new Error('No active Strava session found.')\n  }\n\n  const { id, secret } = auth.client\n  const { refreshToken } = auth.session\n\n  const result = await authenticateWithRefreshToken(id, secret, refreshToken)\n  const newAuth: ActiveStravaAuth = {\n    client: auth.client,\n    session: {\n      ...auth.session,\n      ...result,\n    },\n  }\n\n  await setStoredStravaAuth(newAuth)\n  return newAuth\n}\n\nexport interface StravaClient {\n  id: string\n  secret: string\n}\n\nexport interface StravaSession {\n  refreshToken: string\n  accessToken: string\n  expiresAt: Date\n  athlete: {\n    id: string\n    name: string\n    avatarUrl: string\n  }\n}\n\ninterface ActiveStravaAuth {\n  client: StravaClient\n  session: StravaSession\n}\n\nexport interface StravaAuth {\n  client?: StravaClient\n  session?: StravaSession\n}\n","import { useEffect, useState } from 'react'\nimport { Redirect, RouteComponentProps } from 'react-router'\n\nimport { authenticateWithCode } from './strava-auth-api'\nimport { setStoredStravaAuth, useStravaAuth } from './strava-store'\n\nexport const StravaAuthReturn = ({ location }: RouteComponentProps) => {\n  const auth = useStravaAuth()\n  const { id, secret } = auth?.client || {}\n\n  const { search } = location\n\n  const [done, setDone] = useState(false)\n  const [error, setError] = useState('')\n\n  useEffect(() => {\n    ;(async () => {\n      const params = new URLSearchParams(search)\n      const error = params.get('error')\n      const code = params.get('code')\n      //const scope = params.get('scope')\n      //const state = params.get('state')\n\n      if (error) {\n        setError(error)\n        return\n      }\n\n      if (id && secret && code) {\n        const result = await authenticateWithCode(id, secret, code)\n\n        await setStoredStravaAuth({\n          client: { id, secret },\n          session: {\n            refreshToken: result.refreshToken,\n            accessToken: result.accessToken,\n            expiresAt: result.expiresAt,\n            athlete: {\n              id: '',\n              avatarUrl: '',\n              name: `${result.info.firstName} ${result.info.lastName}`,\n            },\n          },\n        })\n\n        setDone(true)\n      }\n    })()\n  }, [id, secret, search])\n\n  if (error) {\n    return (\n      <p>\n        Error during authentication with Strava: <code>{error}</code>\n      </p>\n    )\n  }\n\n  return done ? <Redirect to=\"/settings\" /> : null\n}\n","import { useState } from 'react'\n\nexport const useUniqueId = () => {\n  const [id] = useState(createUniqueId)\n  return id\n}\n\nlet lastUniqueId = 0\nconst createUniqueId = () => `id-${++lastUniqueId}`\n","import {\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  PropsWithChildren,\n  useState,\n} from 'react'\nimport { useUniqueId } from '../utils/useUniqueId'\nimport './InputField.css'\n\ntype InputFieldProps = PropsWithChildren<\n  DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n>\n\nexport const InputField = ({ children, ...props }: InputFieldProps) => {\n  const uniqueId = useUniqueId()\n\n  const [showPassword /*setShowPassword*/] = useState(false)\n  const type = showPassword ? 'text' : props.type\n\n  return (\n    <>\n      <label htmlFor={props.id || uniqueId}>{children}</label>\n      <input {...props} type={type} id={props.id || uniqueId} />\n      {/*\n      {props.type === 'password' && !showPassword && (\n        <button className=\"password-btn\" type=\"button\" onClick={() => setShowPassword(true)}>\n          Show\n        </button>\n      )}\n      {props.type === 'password' && showPassword && (\n        <button className=\"password-btn\" type=\"button\" onClick={() => setShowPassword(false)}>\n          Hide\n        </button>\n      )}\n      */}\n    </>\n  )\n}\n","import { getStravaAuthenticationUrl } from './strava-auth-api'\nimport { Route, useRouteMatch } from 'react-router'\nimport { StravaAuthReturn } from './StravaAuthReturn'\nimport { InputField } from '../../components/InputField'\nimport { setStoredStravaAuth, useStravaAuth } from './strava-store'\n\nexport const StravaApiConnection = () => {\n  const auth = useStravaAuth()\n  const routeMatch = useRouteMatch()\n\n  console.log('auth:', auth)\n\n  return (\n    <form\n      style={{ display: 'flex', flexDirection: 'column', maxWidth: '500px' }}\n      onSubmit={(e) => {\n        e.preventDefault()\n\n        const formData = new FormData(e.target as HTMLFormElement)\n        const id = formData.get('clientId')!.toString().trim()\n        const secret = formData.get('clientSecret')!.toString().trim()\n\n        ;(async () => {\n          await setStoredStravaAuth({ client: { id, secret } })\n\n          const redirectUrl = `${window.location.href}/strava-auth-return`\n          const authUrl = getStravaAuthenticationUrl(id, redirectUrl)\n\n          window.location.href = authUrl\n        })()\n      }}\n    >\n      <h2>Settings</h2>\n      <h3>Strava API Client</h3>\n      <InputField required name=\"clientId\" defaultValue={auth?.client?.id}>\n        Client ID\n      </InputField>\n      <InputField\n        required\n        name=\"clientSecret\"\n        type=\"password\"\n        defaultValue={auth?.client?.secret}\n      >\n        Client Secret\n      </InputField>\n      <button type=\"submit\">Save and connect</button>\n\n      {!auth?.session && (\n        <div>\n          <p>\n            The app is not currently connected to strava. Enter your API\n            credentials and connect. You will be prompted to link your account\n            with this app, allowing it to access the Strava API.\n          </p>\n          <p>\n            This app has no back-end so you will need to{' '}\n            <a href=\"https://www.strava.com/settings/api\">\n              configure your own Strava API application\n            </a>\n            . Make sure that the <i>Authorization Callback Domain</i> is set to{' '}\n            <code>{window.location.host}</code> or authorization will not work.\n          </p>\n          <p>\n            Please{' '}\n            <a href=\"https://www.strava.com/legal/api\">\n              read the Strava API Agreement\n            </a>{' '}\n            before entering your client id and secret into the application. The\n            creator(s) of this software are not responsible for what you do with\n            it and will not be held accountable if Strava revokes your access to\n            their API if they were to judge that this is not a correct use of\n            it. Note that no data retrieved from the API will be stored anywhere\n            other than on the browser for caching purposes.\n          </p>\n        </div>\n      )}\n      {auth?.session && (\n        <>\n          <h3>Strava API Session</h3>\n          <InputField readOnly value={auth?.session.athlete.name}>\n            Display Name\n          </InputField>\n          <InputField\n            type=\"password\"\n            readOnly\n            value={auth?.session.accessToken}\n          >\n            Access Token\n          </InputField>\n          <InputField readOnly value={auth?.session.expiresAt.toISOString()}>\n            Expires At\n          </InputField>\n          <InputField\n            type=\"password\"\n            readOnly\n            value={auth?.session.refreshToken}\n          >\n            Refresh Token\n          </InputField>\n          <button\n            type=\"button\"\n            onClick={() => {\n              setStoredStravaAuth(undefined)\n            }}\n          >\n            Clear Strava session and all cached data\n          </button>\n        </>\n      )}\n\n      <Route\n        path={`${routeMatch.path}/strava-auth-return`}\n        component={StravaAuthReturn}\n      />\n    </form>\n  )\n}\n","import { NavLink } from 'react-router-dom'\nimport { useStravaAuth } from '../strava-integration/strava-store'\nimport './Header.css'\n\nexport const Header = () => {\n  const auth = useStravaAuth()\n\n  return (\n    <header className=\"app-header\">\n      <nav>\n        <h1>Running Stats</h1>\n        <ul>\n          <li>\n            <NavLink to=\"/activities\">Activities</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/maps\">Maps</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/settings\">Settings</NavLink>\n          </li>\n        </ul>\n      </nav>\n\n      <div className=\"strava-status\">\n        {!auth?.session && 'Not connected'}\n        {auth?.session && auth.session.athlete.name}\n      </div>\n    </header>\n  )\n}\n","interface PaginationProps {\n  page: number\n  canOpenNextPage: boolean\n  canOpenPreviousPage: boolean\n  onOpenPage: (page: number) => void\n}\n\nexport const Pagination = ({\n  page,\n  onOpenPage,\n  canOpenNextPage,\n  canOpenPreviousPage,\n}: PaginationProps) => (\n  <div>\n    <button\n      disabled={!canOpenPreviousPage}\n      onClick={() => onOpenPage(page - 1)}\n    >\n      Previous\n    </button>\n    <span style={{ margin: '1rem' }}>Page {page}</span>\n    <button disabled={!canOpenNextPage} onClick={() => onOpenPage(page + 1)}>\n      Next\n    </button>\n  </div>\n)\n","import { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Pagination } from '../../components/Pagination'\nimport * as strava from '../strava-integration/strava-api'\n\nexport const ActivitiesList = () => {\n  const [activities, setActivities] = useState<any[]>()\n  const [page, setPage] = useState<number>(1)\n\n  useEffect(() => {\n    ;(async () => {\n      const activities = await strava.getPagedActivities(page)\n      setActivities(activities)\n    })()\n  }, [page])\n\n  return (\n    <div>\n      <h2>Activities</h2>\n      <Pagination\n        page={page}\n        onOpenPage={setPage}\n        canOpenPreviousPage={page > 1}\n        canOpenNextPage={!!activities && activities.length > 0}\n      />\n\n      <ul>\n        {activities?.map((activity) => (\n          <li key={activity.id}>\n            <Link to={`/activities/${activity.id}`}>{activity.name}</Link> (\n            {Math.round(activity.distance / 1000)} km)\n          </li>\n        ))}\n      </ul>\n      {!activities && <p>loading...</p>}\n      {activities && !activities.length && <p>No more results</p>}\n    </div>\n  )\n}\n","import './Footer.css'\n\nexport const Footer = () => {\n  return (\n    <footer className=\"app-footer\">\n      <a href=\"https://www.strava.com\">\n        <img\n          alt=\"Powered by Strava\"\n          src={`${process.env.PUBLIC_URL}/powered-by-strava.svg`}\n          style={{ height: '2rem' }}\n        />\n      </a>\n    </footer>\n  )\n}\n","import { StravaApiConnection } from './strava-integration/StravaApiSettings'\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom'\nimport { Header } from './header/Header'\nimport { ActivitiesList } from './activities/ActivitiesList'\nimport { lazy, Suspense } from 'react'\nimport { Footer } from './footer/Footer'\n\nconst Maps = lazy(() => import('./maps/ActivityMaps'))\nconst ActivityOverview = lazy(() => import('./activities/ActivityOverview'))\n\nexport const App = () => {\n  return (\n    <HashRouter>\n      <div className=\"app-content-without-footer\">\n        <Header />\n        <Suspense fallback={<p>Loading...</p>}>\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/settings\" />} />\n            <Route path=\"/settings\" component={StravaApiConnection} />\n            <Route path=\"/activities/:id\" component={ActivityOverview} />\n            <Route path=\"/activities\" component={ActivitiesList} />\n            <Route path=\"/maps\" component={Maps} />\n          </Switch>\n        </Suspense>\n      </div>\n      <Footer />\n    </HashRouter>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './features/App'\nimport './index.css'\n//import App from './App';\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { get, set } from 'idb-keyval'\nimport { useEffect, useState } from 'react'\n\n/** Retrieves strava auth from the store. */\nexport const getStoredStravaAuth = async () =>\n  await get<StoredStravaAuth>('strava-auth')\n\n/** Stores the strava auth value and calls all auth listeners.  */\nexport const setStoredStravaAuth = async (\n  auth: StoredStravaAuth | undefined\n) => {\n  await set('strava-auth', auth)\n  stravaAuthChangeListeners.forEach(({ callback }) => callback())\n}\n\n/**\n * Registers the callback as a listener for auth changes.\n * @returns a function that unregisters that listener.\n */\nexport const listenToStravaAuthChange = (callback: () => void) => {\n  const listener = { callback }\n  stravaAuthChangeListeners.push(listener)\n  return () => {\n    const index = stravaAuthChangeListeners.findIndex(\n      (item) => item === listener\n    )\n    if (index >= 0) {\n      stravaAuthChangeListeners.splice(index, 1)\n    }\n  }\n}\n\n/**\n * React hook that keeps the latest strava auth object\n * and listens for changes to the stored auth.\n */\nexport const useStravaAuth = () => {\n  const [auth, setAuth] = useState<StoredStravaAuth>()\n\n  useEffect(() => {\n    let cancelled = false\n\n    const updateAuth = async () => {\n      const auth = await getStoredStravaAuth()\n      if (!cancelled) {\n        setAuth(auth)\n      }\n    }\n\n    // retrieve initial value.\n    updateAuth()\n\n    const unregister = listenToStravaAuthChange(updateAuth)\n\n    return () => {\n      unregister()\n      cancelled = true\n    }\n  }, [])\n\n  return auth\n}\n\n/** List of listeners registered via `listenToStravaAuthChange` */\nconst stravaAuthChangeListeners: { callback: () => void }[] = []\n\ninterface StoredStravaAuth {\n  client?: {\n    id: string\n    secret: string\n  }\n  session?: {\n    refreshToken: string\n    accessToken: string\n    expiresAt: Date\n    athlete: {\n      id: string\n      name: string\n      avatarUrl: string\n    }\n  }\n}\n"],"sourceRoot":""}